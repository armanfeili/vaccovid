  the process.env.MONGO_URI, and the process.env.SECRET_OR_KEY, are somthing
  that just server can findout what's they are.
  so they're suitable for pushing to servers like heroku or so on

  start a project

  at first we need to run 'npm init' and set the name, descriptoin and author
  then it's recommended to set entry point to 'server.js'

  some modules, are nessesary for any project.like:
  ********************************************************************
  $ npm i express mongoose passport passport-jwt jsonwebtoken body-parser bcryptjs validator concurrently
  ********************************************************************* */
  instead of running files with nodemon every single times, we can write

  "scripts":{
      "start":"node server.js",
      "server":"nodemon server.js",
      "client": "npm start --prefix client",
      "dev": "concurrently \"lsof -t -i tcp:5000 | xargs kill -9\" \"npm run server\" \"npm run client\""
  }

  and also we need to install concurrently, so server will goes up on 5000 and react goes on 3000 port by default,but at the same time
  so we have: $ npm i concurrently

  so with writing $ npm start dev, we can run both client and server

  with writing $npm run client-install , package.json will install in client folder

  with writing $npm i -g create-react-app , this module install globally and we can use it anywhere we want to creat an app.
  then we should have: $create-react-app client
  this will build a folder name client with all related files and folders of webpack,babel,app.js,index.html
  so we should go to client => package.json and add proxy to the file->
  "proxy": "http://localhost:5000",

  with this, anytime we want to write axios.get(), we don't need to write the whole "http: localhost:5000",
  and instead we can say sth like: axios.get('/api/post') and start off from '/'

  we also need to install some modules in client ,like:
  *************************************************************************
  $npm i react react-dom react-router-dom react-scripts classnames redux react-redux redux-thunk axios jwt-decode
  *************************************************************************

  Heroku tips:

  we first should make sure we have installed heroku toolbelt or heroku CLI on our machine
  then in our terminal, in our route, we have:
  $heroku
  it shows all options and commands we can use with heroku
  $heroku login
  help us to login to heroku throw terminal
  $heroku create
  creates a route for deploying to it
  after we creat a route, we should go to heroku and choose that route, then go to setting and in
  'Config Variables' part, press 'Reveal Congig Vars' button
  here is the place, we should import MONGO_URI as key and a database like what we had in mLab,
  (mongodb: armandomlab:arbamlab756@ds147213.mlab.com:47213/devconnector) 
  as value
  the next key-value pairs should be: SECRET_OR_KEY as key and someSecret as value
  if we don't add these, it's going to look for these and it's not gonna work
 
  Now the next thing we need to do in order to be able to push to our Heroku application, is
  we need to get the remote command. so in navbar, choose deploy, and in Existing Git repository
  copy whole command besides ($) like: heroku git:remote -a shielded-harbor-46217
  This is going to add this remote repository or this application as our source when we push
  so we copy that and past that in our terminal, and run it
  so we'll see:
  set git remote heroku to https: git.heroku.com/shielded-harbor-46217.git

  before pushing a commit of our application to heroku, we need to do some things:
  if we look at our client package.json file, we can see 'build' command. like:
  "build": "react-scripts build",
  so we can run that by: 
  $ cd client
  $ npm run build
  And what this does is it compiles out our front-end React application into a folder called Build.
  But what it's doing is it's creating static assets where we could just take our front-end application
  in and deploy it very easily.
  in build folder, there is a file named 'index.html', and it contains all of our react application
  but we have a full-stack application and we need to connect server to this 'index.html'
  so in server.js, we have:
  Server static assets if in production
  if (process.env.NODE_ENV === 'production') {
      Set static folder
    app.use(express.static('client/build'))
      creating our route
      here, we want to get anything that is not our api route, (not like: '/api/profile')
    app.get('*', (req, res) => {
        for sending file , we need to add path module which is a built-in node module
        __dirname is the current directory
      res.sendFile(path.resolve(__dirname, 'client', 'build', 'index.html'))
    })
  }

  we can run $npm run build , before every single time we want to push to heroku
  so a better way is build on assets on our server (on heroku)
  so we can just push and then we'll have a script that will automatically run and build out these files.
  so let's delete 'build' folder, and in package.json on our server,we write a script to do this:

  "scripts": {
    "heroku-postbuild": "NPM_CONFIG_PRODUCTION=false npm install --prefix client && npm run build --prefix client"
  },

  the reson we write this, is if we don't do this, it's not gonna run devDependencies
  include webpack and all that in React application(client), and we need them to run, so we set NPM_CONFIG_PRODUCTION to false
  and then we wrote npm install and then, --prefix client (because we want to run it inside client folder)
  and also (&&) , we run 'npm run build' on server with client prefix to run it inside our client

  now we're ready to push it to heroku
  make sure we're in devconnector (the root or the server). then:
  $ git add .
  $ git commit -am 'Prepared for deploy'

  and also we should make sure, we loged in to heroku and have set a git remote to heroku server
 

  Notice:
  there might be some issues on pushing to heroku, and maybe it shows this error:
  ./src/index.css
       remote: Module build failed: BrowserslistError: Unknown browser query`dead`
       remote: at Array.forEach(<anonymous>)

  so we should change our browserlist in root package.json, to sth like below, and actually we limit our application to not run in some browsersÃŸ:

  "browserslist": [
      "> 0.5%",
      "last 2 versions",
      "Firefox ESR",
      "not ie <= 10",
      "not ie_mob <= 10",
      "not bb <= 10",
      "not op_mob <= 12.1"
  ]

  mongoDB atlas tips:

  we go to mongodb.com and sign in, then we create a cluster,click on aws, then N.Virginia(us - east - 1) , then
  in shared Tier, click free for ever, then set a cluster name, and build a cluster:
  then go to securety > Add new user > set username and password and click on Read and write to any database./then click AddUser
  these users that we entered, can read and write any database
  then in securety, go to IP Whitelist > click on ADD IP ADDRESS
  we can use our current ip address, which is our dev mashin(where we developing applications) and once we deployed we should put our server's ip address.
  or we can use allow access from anywhere with username and password,  
  if we're in production and it's a real application for the client, it's good to hoose 'ADD CURRENT IP ADDRESS', then click confirm

  then in our cluster overview, we click on connect > connect your application > standarad connection string
  we copy the URI connection string and paste it in congig/keys_dev.js

  please check the congig/keys_dev.js
