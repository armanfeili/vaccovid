read react 
read redux
read thunk, Provider, createStore, applyMiddleware in Redux
---
variable types
types alias     type|type
readonly
public
Private
protected
enum
tuples          arrays with mixed types
function types
object types
[propName: string]: any;

classes
Setter and Getter
Helper class
Generics
Interface 
Interface Inheritance => extends

the interface will automatically check if the type of the passing instance to the class
has the right arguments or not. if it does, so we can pass the instance to the class and use the method

Implements => implement that class with imported interface. (optional)
with this approche, we can spot errors directly from implemented classes.

Static properties and methods   for accessing inside the class
inheritance
extends
super()         for classes which are inherited

abstract classes    just to inherit
Abstract methods:
whenever we have an abstract class, within that abstract class, we have methods which are depended on some methods
existed in child class, we should define those methods in the abstract class likewise, as abstract methods.
so abstract methods will be *require* for inheritance. 
if we want to make them optional, we should define them as normal methods.

Private constructor
sometimes we can use private constructor or private static variables, when we want to create the instance just once.

namespace    we can create a namespace just like a class, and wirte all the code (including 
defining variables and functions or objects and so on...) and export them

Decorator
Factory

different type guards:
typeof: we use this keyword for number, string, boolean, symbol
instanceof: we use it for every other value that is created with a constructor function: like Object, Array, or
even classes
with use of "instanceof", we can use the type guard to restore access to one of these specific types, 
that we're dealing with, inside of the union operator


React + TS

index.ts
*** Attention: we don't export anything from our root index.ts file.


tsc -w
in project, we should put all ts files in ./src and put all js files in ./build
so we need tsconfig.json file. so we write: $ tsc --init
we should change "outDir" and "rootDir"
rootDir is going to be reletive reference to the directory that holds all of our source code.
for this project, we define it as: "rootDir": "./src"
outDir is the place we want to keep our compiled code. "outDir": "./build"
now with writing just "$ tsc -w". it will find the tsconfig file and do the compilation

-----------
use Model class itself, as a generic constraint. because a class can act like a type.

----------------------------------------------------------------
import { Model } from './../models/Model';

// here we used Model as a type which can be extended by T. but the Model class, is also a generic class.
// so we should also send a generic type to Model class. that's why we used 2 generic types here: T & K
// so whenever we make a reference to View we're gonna pass in a type of Model (here is User class), 
// and the second type will be the set of attributes inside that Model. so K can be UserProps, and T can be User
// so we have sth like: <T extends Model<UserProps>, UserProps>

export abstract class View<T extends Model<K>, K> {
  ...
}
----------------------------
import { User, UserProps } from '../models/User';
import { View } from './View';

export class UserForm extends View<User, UserProps> {
  ...
}

------------------------------------------------------

// Generic Constraints

class Car1 {
  print() {
    console.log('I am a Car1');
  }
}

class House {
  print() {
    console.log('I am a house');
  }
}

// we should define a constranit for printHousesOrCars funciton and promise
// that the print() method should be available.
interface Printable {
  print(): void;
}

function printHousesOrCars<T extends Printable>(arr: T[]): void {
  for (let i = 0; i < arr.length; i++) {
    arr[i].print();
  }
}

printHousesOrCars<House>([new House(), new House()]);
printHousesOrCars<Car1>([new Car1(), new Car1()]);
printHousesOrCars<Car1 | House>([new Car1(), new House()]);

// <T extends Printable> means that whatever type T we put in here, will have all the properties
// that Printable interface has.
-----------------------------------------------------

IIFE:
The primary reason to use an IIFE is to obtain data privacy. Because JavaScript's var scopes variables 
to their containing function, any variables declared within the IIFE cannot be accessed by the outside world.