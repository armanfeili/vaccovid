//// table country
//---
//CREATE TABLE country(
//country_id serial UNIQUE PRIMARY KEY,
//country_name VARCHAR (50) UNIQUE NOT NULL,
//created_date TIMESTAMP NOT NULL default current_timestamp,
//last_update TIMESTAMP
//);
//---

//// table province
//---
//CREATE TABLE province(
//province_id serial UNIQUE PRIMARY KEY,
//province_name VARCHAR (50) UNIQUE NOT NULL,
//country_id integer NOT NULL,
//created_date TIMESTAMP NOT NULL default current_timestamp,
//last_update TIMESTAMP,
////
////CONSTRAINT province_country_id_fkey FOREIGN KEY (country_id)
//////REFERENCES country (country_id) MATCH SIMPLE
//////ON UPDATE CASCADE ON DELETE CASCADE//
//);
//---


//// table city
//---
//CREATE TABLE city(
//city_id serial UNIQUE PRIMARY KEY,
//city_name VARCHAR (50) UNIQUE NOT NULL,
//province_id integer NOT NULL,
//created_date TIMESTAMP NOT NULL default current_timestamp,
//last_update TIMESTAMP,
////
////CONSTRAINT city_province_id_fkey FOREIGN KEY (province_id)
//////REFERENCES province (province_id) MATCH SIMPLE
//////ON UPDATE CASCADE ON DELETE CASCADE
//);
//---

// table address
---
CREATE TABLE address(
address_id serial UNIQUE PRIMARY KEY,
user_id integer NOT NULL,
country_name VARCHAR (50) NOT NULL,
province_name VARCHAR (50) NOT NULL,
city_name VARCHAR (50) NOT NULL,
home_number numeric(11,0) UNIQUE NOT NULL check (home_number > 0),
post_address VARCHAR (355) NOT NULL,
postal_code numeric(10,0) NOT NULL check (home_number > 0),
map_latitude_coordinate float8,
map_longitude_coordinate float8,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP
);
---
// log 
---
CREATE TABLE log(
log_id serial UNIQUE PRIMARY KEY,

user_id integer NOT NULL,
username VARCHAR (50) NOT NULL,
ip_address INET,
action text NOT NULL,
description text NOT NULL,
created_date TIMESTAMP NOT NULL default current_timestamp
);

---

// usertable
---
CREATE TABLE usertable(
user_id serial UNIQUE PRIMARY KEY,

profile_url VARCHAR (355) UNIQUE,
username VARCHAR (50) UNIQUE NOT NULL,
password VARCHAR (355) NOT NULL,
email VARCHAR (355) UNIQUE NOT NULL,
is_authenticated BOOLEAN DEFAULT 'false',
authentication_code text,
role integer,	// 0 means user, 1 means designer, 2 means customer
// is_designer integer, 	// NULL means not initiated yet, TRUE means user is designer, FALSE means user is customer
address_id integer NOT NULL,

activebool BOOLEAN DEFAULT 'true',
active integer DEFAULT 1,
	

deleted_at TIMESTAMP,
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP
);
---

// designer
---
CREATE TABLE designer(
designer_id serial UNIQUE PRIMARY KEY,
user_id integer UNIQUE NOT NULL,
brand_name VARCHAR (100) UNIQUE NOT NULL,
description text NOT NULL,		// TEXT data-type =>  TEXT is the variable-length character string. Theoretically, text data is a character string with unlimited length.
background_picture_path VARCHAR (),
profile_picture_path VARCHAR (),
// X // address_id integer NOT NULL,
first_name VARCHAR (50) NOT NULL,
last_name VARCHAR (50) NOT NULL,
phone_number numeric(11,0) NOT NULL check (phone_number > 0),
bank_card_number numeric(16,0) NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT designer_user_id_fkey FOREIGN KEY (user_id)
		REFERENCES usertable (user_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,

	CONSTRAINT designer_address_id_fkey FOREIGN KEY (address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---

// customer
---
CREATE TABLE customer(
customer_id serial UNIQUE PRIMARY KEY,
user_id integer UNIQUE NOT NULL,

// address_id integer NOT NULL,
first_name VARCHAR (50) NOT NULL,
last_name VARCHAR (50) NOT NULL,
phone_number numeric(11,0) NOT NULL check (phone_number > 0),
bank_card_number numeric(16,0) NOT NULL,

gender varchar (10) NOT NULL,
invited_profile_url VARCHAR (355),
receive_news BOOLEAN DEFAULT 'true' NOT NULL,
remained_credit integer,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT customer_user_id_fkey FOREIGN KEY (user_id)
		REFERENCES usertable (user_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,

	CONSTRAINT customer_address_id_fkey FOREIGN KEY (address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---

// cloth_category
---
CREATE TABLE cloth_category(
cloth_category_id serial UNIQUE PRIMARY KEY,
cloth_category_name VARCHAR (50) NOT NULL,
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP
);
---

// cloth_sub_category
---
CREATE TABLE cloth_sub_category(
cloth_sub_category_id serial UNIQUE PRIMARY KEY,
cloth_category_id integer UNIQUE NOT NULL,
cloth_sub_category_name VARCHAR (50) NOT NULL,
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT cloth_sub_category_cloth_category_id_fkey FOREIGN KEY (cloth_category_id)
		REFERENCES cloth_category (cloth_category_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// cloth
---
CREATE TABLE cloth(
cloth_id serial UNIQUE PRIMARY KEY,
cloth_sub_category_id integer NOT NULL,
designer_id integer NOT NULL,
title VARCHAR (50) NOT NULL,
information text NOT NULL,
picture VARCHAR(355) [] NOT NULL,
combination_material text NOT NULL, // shouldn't be just text.
cleaning_order text NOT NULL,
other_wearing text, // json
color varchar(20) [],
share_link varchar(355) UNIQUE NOT NULL,
season VARCHAR(20),	// array
what_kind_of_person VARCHAR (20) NOT NULL,
price real NOT NULL,
discount_percent real,
price_with_discount real,	
number_of_purchase integer,
is_product BOOLEAN DEFAULT 'true' NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT cloth_cloth_sub_category_id_fkey FOREIGN KEY (cloth_sub_category_id)
		REFERENCES cloth_sub_category (cloth_sub_category_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT cloth_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// cloth_size_guide
---
CREATE TABLE cloth_size_guide(
cloth_size_guide_id serial UNIQUE PRIMARY KEY,
cloth_id integer NOT NULL,
size_alphabet VARCHAR(20) NOT NULL,
height real NOT NULL,
chest real NOT NULL,
hips real NOT NULL,
waist real NOT NULL,
number_of_available integer NOT NULL check (number_of_available > -1),
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT cloth_size_guide_cloth_id_fkey FOREIGN KEY (cloth_id)
		REFERENCES cloth (cloth_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// shipping_cart
---
CREATE TABLE shipping_cart(
shipping_card_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
subtotal_price integer NOT NULL,
shipping_price integer NOT NULL,
total_price integer NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT shipping_card_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// shipping_cart_order_item
---
CREATE TABLE shipping_card_order_item(
shipping_cart_order_item_id serial UNIQUE PRIMARY KEY,
shipping_cart_id integer NOT NULL,
cloth_id integer,
shoes_id integer,
bag_id integer,
jewelry_id integer,
gift_card_id integer,
quantity integer NOT NULL,
size VARCHAR(20) NOT NULL,
purchase_confirmation BOOLEAN DEFAULT 'false' NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT shipping_card_order_item_shipping_card_id_fkey FOREIGN KEY (shipping_card_id)
		REFERENCES shipping_card (shipping_card_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT shipping_card_order_item_cloth_id_fkey FOREIGN KEY (cloth_id)
		REFERENCES cloth (cloth_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT shipping_card_order_item_shoes_id_fkey FOREIGN KEY (shoes_id)
		REFERENCES shoes (shoes_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT shipping_card_order_item_bag_id_fkey FOREIGN KEY (bag_id)
		REFERENCES bag (bag_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT shipping_card_order_item_jewelry_id_fkey FOREIGN KEY (jewelry_id)
		REFERENCES jewelry (jewelry_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT shipping_card_order_item_gift_card_id_fkey FOREIGN KEY (gift_card_id)
		REFERENCES gift_card (gift_card_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// gift_card
---
CREATE TABLE gift_card(
gift_card_id serial UNIQUE PRIMARY KEY,
customer_id integer,
gift_card_name VARCHAR(50) NOT NULL,
price integer NOT NULL,
description VARCHAR(355),
pass_code integer UNIQUE NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT gift_card_shipping_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// shoes_category
---
CREATE TABLE shoes_category(
shoes_category_id serial UNIQUE PRIMARY KEY,
shoes_category_name VARCHAR(50) NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP
);
---
 
// shoes_sub_category
---
CREATE TABLE shoes_sub_category(
shoes_sub_category_id serial UNIQUE PRIMARY KEY,
shoes_category_id integer NOT NULL,
shoes_sub_category_name VARCHAR(50) NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT shoes_sub_category_shoes_category_id_fkey FOREIGN KEY (shoes_category_id)
		REFERENCES shoes_category (shoes_category_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// bag_category
---
CREATE TABLE bag_category(
bag_category_id serial UNIQUE PRIMARY KEY,
bag_category_name VARCHAR(50) NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP
);
---
 
// accessory_category
---
CREATE TABLE accessory_category(
accessory_category_id serial UNIQUE PRIMARY KEY,
accessory_category_name VARCHAR(50) NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP
);
---
 
// jewelry_category
---
CREATE TABLE jewelry_category(
jewelry_category_id serial UNIQUE PRIMARY KEY,
jewelry_category_name VARCHAR(50) NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP
);
---
 
// sotry_category
---
CREATE TABLE sotry_category(
sotry_category_id serial UNIQUE PRIMARY KEY,
sotry_category_name VARCHAR(50) NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP
);
---
 
// shoes
---
CREATE TABLE shoes(
shoes_id serial UNIQUE PRIMARY KEY,
shoes_sub_category_id integer NOT NULL,
designer_id integer NOT NULL,
title VARCHAR (50) NOT NULL,
information text NOT NULL,
picture VARCHAR(355) [] NOT NULL,
countrey_made VARCHAR (355),
material_of_sole text NOT NULL,
material_of_lining text NOT NULL,
material_of_outer text NOT NULL,
cleaning_order text,
other_wearing text,
color varchar(20) [],
share_link varchar(355) UNIQUE NOT NULL,
season VARCHAR(20),
what_kind_of_person VARCHAR (20) NOT NULL,
price real NOT NULL,
price_with_discount real,
number_of_purchase integer,
is_product BOOLEAN DEFAULT 'true' NOT NULL,

	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT shoes_shoes_sub_category_id_fkey FOREIGN KEY (shoes_sub_category_id)
		REFERENCES shoes_sub_category (shoes_sub_category_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT shoes_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// bag
---
CREATE TABLE bag(
bag_id serial UNIQUE PRIMARY KEY,
bag_category_id integer NOT NULL,
designer_id integer NOT NULL,
title VARCHAR (50) NOT NULL,
information text NOT NULL,
picture VARCHAR(355) [] NOT NULL,
countrey_made VARCHAR (355),
material_of_lining text NOT NULL,
material_of_outer text NOT NULL,
cleaning_order text,
other_wearing text,
color varchar(20) [],
share_link varchar(355) UNIQUE NOT NULL,
season VARCHAR(20),
what_kind_of_person VARCHAR (20) NOT NULL,
price real NOT NULL,
price_with_discount real,
number_of_purchase integer,
is_product BOOLEAN DEFAULT 'true' NOT NULL,

	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT bag_bag_category_id_fkey FOREIGN KEY (bag_category_id)
		REFERENCES bag_category (bag_category_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT bag_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// accessory
---
CREATE TABLE accessory(
accessory_id serial UNIQUE PRIMARY KEY,
accessory_category_id integer NOT NULL,
designer_id integer NOT NULL,
title VARCHAR (50) NOT NULL,
information text NOT NULL,
picture VARCHAR(355) [] NOT NULL,
countrey_made VARCHAR (355),
material  VARCHAR(100) NOT NULL,
cleaning_order text,
other_wearing text,
color varchar(20) [],
share_link varchar(355) UNIQUE NOT NULL,
season VARCHAR(20),
what_kind_of_person VARCHAR (20) NOT NULL,
price real NOT NULL,
price_with_discount real,
number_of_purchase integer,
is_product BOOLEAN DEFAULT 'true' NOT NULL,

	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT accessory_accessory_category_id_fkey FOREIGN KEY (accessory_category_id)
		REFERENCES accessory_category (accessory_category_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT accessory_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// jewelry
---
CREATE TABLE jewelry(
jewelry_id serial UNIQUE PRIMARY KEY,
jewelry_category_id integer NOT NULL,
designer_id integer NOT NULL,
title VARCHAR (50) NOT NULL,
information text NOT NULL,
picture VARCHAR(355) [] NOT NULL,
countrey_made VARCHAR (355),
material text NOT NULL,
other_wearing text,
color varchar(20) [],
share_link varchar(355) UNIQUE NOT NULL,
what_kind_of_person VARCHAR (20) NOT NULL,
price real NOT NULL,
price_with_discount real,
number_of_purchase integer,
is_product BOOLEAN DEFAULT 'true' NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT jewelry_jewelry_category_id_fkey FOREIGN KEY (jewelry_category_id)
		REFERENCES jewelry_category (jewelry_category_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT jewelry_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// shoes_size_guide
---
CREATE TABLE shoes_size_guide(
shoes_size_guide_id serial UNIQUE PRIMARY KEY,
shoes_id integer NOT NULL,
size_alphabet VARCHAR(20) NOT NULL,
back_height real NOT NULL,
front_height real NOT NULL,
back_width real NOT NULL,
front_width real NOT NULL,
heel real NOT NULL,
waist real NOT NULL,
number_of_available integer NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT shoes_size_guide_shoes_id_fkey FOREIGN KEY (shoes_id)
		REFERENCES shoes (shoes_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// bag_size_guide
---
CREATE TABLE bag_size_guide(
bag_size_guide_id serial UNIQUE PRIMARY KEY,
bag_id integer NOT NULL,
number_of_available integer NOT NULL,
size_alphabet VARCHAR(20) NOT NULL,
depth real NOT NULL,
height real NOT NULL,
width real NOT NULL,
handle real,
strap real,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT bag_size_guide_bag_id_fkey FOREIGN KEY (bag_id)
		REFERENCES bag (bag_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// accessory_size_guide
---
CREATE TABLE accessory_size_guide(
accessory_size_guide_id serial UNIQUE PRIMARY KEY,
accessory_id integer NOT NULL,
number_of_available integer NOT NULL,
size_alphabet VARCHAR(20) NOT NULL,
length real,
height real,
width real,
weight real,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT accessory_size_guide_accessory_id_fkey FOREIGN KEY (accessory_id)
		REFERENCES accessory (accessory_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// jewelry_size_guide
---
CREATE TABLE jewelry_size_guide(
jewelry_size_guide_id serial UNIQUE PRIMARY KEY,
jewelry_id integer NOT NULL,
number_of_available integer NOT NULL,
size_alphabet VARCHAR(20) NOT NULL,
length real,
height real,
width real,
weight real,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT jewelry_size_guide_jewelry_id_fkey FOREIGN KEY (jewelry_id)
		REFERENCES jewelry (jewelry_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// story
---
CREATE TABLE story(
story_id serial UNIQUE PRIMARY KEY,
story_category_id integer NOT NULL,
designer_id integer NOT NULL,
claps integer DEFAULT = 0,
share_url VARCHAR (355) NOT NULL,
tags VARCHAR(50) [],

main_picture text NOT NULL,
main_title text NOT NULL,
description text NOT NULL,
picture1 text NOT NULL,
title1 text NOT NULL,
text1 text NOT NULL,
picture2 text NOT NULL,
title2 text NOT NULL,
text2 text NOT NULL,
picture3 text NOT NULL,
title3 text NOT NULL,
text3 text NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT story_story_category_id_fkey FOREIGN KEY (story_category_id)
		REFERENCES story_category (story_category_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
		
	CONSTRAINT story_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// follows
---
CREATE TABLE follows(
follows_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
designer_id integer NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT follows_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
		
	CONSTRAINT follows_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// liked_stories
---
CREATE TABLE liked_stories(
liked_stories_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
story_id integer NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT liked_stories_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
		
	CONSTRAINT liked_stories_story_id_fkey FOREIGN KEY (story_id)
		REFERENCES story (story_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// reported_stories
---
CREATE TABLE reported_stories(
reported_stories_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
story_id integer NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT reported_stories_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
		
	CONSTRAINT reported_stories_story_id_fkey FOREIGN KEY (story_id)
		REFERENCES story (story_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// share_profile_link
---
CREATE TABLE share_profile_link(
share_profile_link_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
profile_url VARCHAR (355) UNIQUE,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT reported_stories_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// customer_order
---
CREATE TABLE customer_order(
customer_order_id serial UNIQUE PRIMARY KEY,
shipping_cart_id integer NOT NULL,
address_id integer NOT NULL,
payment_code integer NOT NULL,
reciever_first_name VARCHAR(50) NOT NULL,
reciever_last_name VARCHAR(50) NOT NULL,
reciever_phone_number integer NOT NULL,
reciever_home_number integer NOT NULL,
total_cost integer NOT NULL,
discount_code VARCHAR (355),
friend_share_code VARCHAR (355),
status_condition VARCHAR(50),
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT customer_order_shipping_card_id_fkey FOREIGN KEY (shipping_card_id)
		REFERENCES shipping_card (shipping_card_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT customer_order_address_id_fkey FOREIGN KEY (address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	
);
---
 
// customer_accounting
---
CREATE TABLE customer_accounting(
customer_accounting_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
customer_order_id integer NOT NULL,
payment_code integer NOT NULL,
money_transfered real NOT NULL,
for_what_reason VARCHAR(50) NOT NULL,
is_paid BOOLEAN NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT customer_accounting_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT customer_accounting_customer_order_id_fkey FOREIGN KEY (customer_order_id)
		REFERENCES customer_order (customer_order_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// designer_accounting
---
CREATE TABLE designer_accounting(
designer_accounting_id serial UNIQUE PRIMARY KEY,
designer_id integer NOT NULL,
customer_id integer NOT NULL,
shipping_card_order_item_id integer NOT NULL,
is_paid BOOLEAN NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT designer_accounting_designer_id_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT designer_accounting_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
	CONSTRAINT designer_accounting_shipping_card_order_item_id_fkey FOREIGN KEY (shipping_card_order_item_id)
		REFERENCES shipping_card_order_item (shipping_card_order_item_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// designer_ship
---
CREATE TABLE designer_ship(
designer_ship_id serial UNIQUE PRIMARY KEY,
designer_id integer NOT NULL,
customer_id integer NOT NULL,
shipping_card_order_item_id integer NOT NULL,
designer_address_id integer NOT NULL,
customer_address_id integer NOT NULL,
payment_code integer NOT NULL,
confirmation_status BOOLEAN DEFAULT 'false',
box_code integer NOT NULL,
status_condition VARCHAR(50),
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT designer_ship_designer_id_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT designer_ship_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT designer_ship_shipping_card_order_item_id_fkey FOREIGN KEY (shipping_card_order_item_id)
		REFERENCES shipping_card_order_item (shipping_card_order_item_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT designer_ship_designer_address_id_fkey FOREIGN KEY (designer_address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT designer_ship_customer_address_id_fkey FOREIGN KEY (customer_address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// customer_ship
---
CREATE TABLE customer_ship(
customer_ship_id serial UNIQUE PRIMARY KEY,
designer_id integer NOT NULL,
customer_id integer NOT NULL,
shipping_card_order_item_id integer NOT NULL,
designer_address_id integer NOT NULL,
customer_address_id integer NOT NULL,
payment_code integer NOT NULL,
returning_confirmation_status VARCHAR(50),
box_code integer NOT NULL,
status_condition VARCHAR(50),
reason text NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT customer_ship_designer_id_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT customer_ship_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT customer_ship_shipping_card_order_item_id_fkey FOREIGN KEY (shipping_card_order_item_id)
		REFERENCES shipping_card_order_item (shipping_card_order_item_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT customer_ship_designer_address_id_fkey FOREIGN KEY (designer_address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT customer_ship_customer_address_id_fkey FOREIGN KEY (customer_address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// acceptance_designer_ship ???
---
CREATE TABLE acceptance_designer_ship(
acceptance_designer_ship_id serial UNIQUE PRIMARY KEY,
designer_id integer NOT NULL,
customer_id integer NOT NULL,
shipping_card_order_item_id integer NOT NULL,
designer_address_id integer NOT NULL,
customer_address_id integer NOT NULL,
price_of_returning real,
payment_code integer NOT NULL,
returning_confirmation_status VARCHAR(50),
box_code integer NOT NULL,
status_condition VARCHAR(50),
reason text NOT NULL,
	
created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT acceptance_designer_ship_designer_id_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT acceptance_designer_ship_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT acceptance_designer_ship_shipping_card_order_item_id_fkey FOREIGN KEY (shipping_card_order_item_id)
		REFERENCES shipping_card_order_item (shipping_card_order_item_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT acceptance_designer_ship_designer_address_id_fkey FOREIGN KEY (designer_address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT acceptance_designer_ship_customer_address_id_fkey FOREIGN KEY (customer_address_id)
		REFERENCES address (address_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// ticket
---
CREATE TABLE ticket(
ticket_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
request_kind VARCHAR (50),
text_message text,
is_responded_yet BOOLEAN DEFAULT 'false',

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT ticket_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// message
---
CREATE TABLE message(
message_id serial UNIQUE PRIMARY KEY,
designer_id integer NOT NULL,
customer_id integer NOT NULL,
text_message text,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT message_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT message_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
	
);
---
 
// favorite
---
CREATE TABLE favorite(
favorite_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
cloth_id integer,
shoes_id integer,
bag_id integer,
jewelry_id integer,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT favorite_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT favorite_cloth_id_fkey FOREIGN KEY (cloth_id)
		REFERENCES cloth (cloth_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT favorite_shoes_id_fkey FOREIGN KEY (shoes_id)
		REFERENCES shoes (shoes_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT favorite_bag_id_fkey FOREIGN KEY (bag_id)
		REFERENCES bag (bag_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT favorite_jewelry_id_fkey FOREIGN KEY (jewelry_id)
		REFERENCES jewelry (jewelry_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION
);
---
 
// transaction
---
CREATE TABLE transaction(
transaction_id serial UNIQUE PRIMARY KEY,
customer_id integer NOT NULL,
designer_id integer NOT NULL,
status_condition VARCHAR(100),
amount_of_money real NOT NULL DEFAULT 0,
payment_code integer NOT NULL,

created_date TIMESTAMP NOT NULL default current_timestamp,
last_update TIMESTAMP,
	
	CONSTRAINT favorite_customer_id_fkey FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
	
	CONSTRAINT favorite_designer_id_fkey FOREIGN KEY (designer_id)
		REFERENCES designer (designer_id) MATCH SIMPLE
		ON UPDATE NO ACTION ON DELETE NO ACTION,
);
---
 